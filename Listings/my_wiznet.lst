C51 COMPILER V9.60.7.0   MY_WIZNET                                                         05/29/2023 20:18:31 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MY_WIZNET
OBJECT MODULE PLACED IN .\Objects\my_wiznet.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE my_wiznet.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BI-12(1);.\wiznet\E
                    -thernet;.\wiznet\Ethernet\W5500;C:\Keil_v5\C51\INC;C:\Keil_v5\C51\INC\SiLABS;C:\Keil_v5\C51\LIB;C:\Keil_v5\C51\BIN;D:\BI
                    --12(1)) DEBUG OBJECTEXTEND PRINT(.\Listings\my_wiznet.lst) TABS(2) OBJECT(.\Objects\my_wiznet.obj)

line level    source

   1          #include "my_wiznet.h"
   2          #include "SPI_Defs.h"
   3          #include "W5500/w5500.h"
   4          
   5          
   6          #include <string.h>
   7          
   8          void delay(uint16_t i1)
   9          {
  10   1        while(i1 != 0) i1--;
  11   1      }
  12          
  13          void my_cs_sel()
  14          {
  15   1        NSS = 0;
  16   1      }
  17          
  18          void my_cs_desel()
  19          {
  20   1        NSS = 1;
  21   1      }
  22          
  23          uint8_t my_spi_rb(void)
  24          {
  25   1        uint8_t cnt;
  26   1        uint16_t d=0;  
  27   1        for(cnt = 0; cnt < 8; cnt++)
  28   1        {
  29   2          CLK = 0;
  30   2          d |= MISO;
  31   2          d<<=1;
  32   2          CLK = 1;
  33   2        }
  34   1      
  35   1        d>>=1;
  36   1        d = (uint8_t)d;
  37   1        return(d);
  38   1      }
  39            
  40          void my_spi_wb(uint8_t d)
  41          {
  42   1        uint8_t cnt;
  43   1        for(cnt = 0; cnt < 8; cnt++)
  44   1        {
  45   2          CLK = 0;
  46   2          MOSI = ((1<<7) & d);
  47   2          d<<=1;
  48   2          CLK =1;
  49   2        }
  50   1      }
  51          
  52          void my_cris_en()
  53          {
C51 COMPILER V9.60.7.0   MY_WIZNET                                                         05/29/2023 20:18:31 PAGE 2   

  54   1        IE &= ~(1<<7);   //MSB in IE = 0 == Disable All Interrupts 
  55   1      }
  56          
  57          void my_cris_ex()
  58          {
  59   1        IE |= (1<<7);   //MSB in IE = 1 == Enable All Interrupts 
  60   1      }
  61          
  62          void read_buf(uint8_t* pBuf, uint16_t len)
  63          {
  64   1        uint8_t cnt;
  65   1        for(cnt = 0; cnt < len; cnt++)
  66   1        {
  67   2          *pBuf++ = my_spi_rb();
  68   2        }
  69   1      }
  70          
  71          void write_buf(uint8_t* pBuf, uint16_t len)
  72          {
  73   1        uint8_t cnt;
  74   1        for(cnt = 0; cnt < len; cnt++)
  75   1        {
  76   2          my_spi_wb(*pBuf++);
  77   2        } 
  78   1      }
  79          
  80          uint8_t passADDR(uint8_t* gw, uint8_t* mask, uint8_t* mac, uint8_t* ipadr)
  81          {
  82   1        uint8_t tmp[6] = {0, 0, 0, 0, 0 ,0 };
  83   1        uint8_t check_gw, 
  84   1                check_mask, 
  85   1                check_mac, 
  86   1                check_ip;
  87   1        
  88   1        setGAR(gw);
  89   1        delay(100);
  90   1        setSUBR(mask);
  91   1        delay(100);
  92   1        setSHAR(mac);
  93   1        delay(100);
  94   1        setSIPR(ipadr);
  95   1        delay(100);
  96   1        
  97   1        //Check addresses
  98   1        getGAR(tmp);
  99   1        check_gw = (memcmp(gw, tmp, 4) == 0) ? 1 : 0;
 100   1        getSUBR(tmp);
 101   1        check_mask = (memcmp(mask, tmp, 4) == 0) ? 1 : 0;
 102   1        getSHAR(tmp);
 103   1        check_mac = (memcmp(mac, tmp, 6) == 0) ? 1 : 0;
 104   1        getSIPR(tmp);
 105   1        check_ip = (memcmp(ipadr, tmp, 4) == 0) ? 1 : 0;
 106   1        if (check_gw && check_mask && check_mac && check_ip) return 1;
 107   1        return 0;
 108   1      }
 109          
 110          
 111          uint8_t wiz_init(uint8_t* gw, uint8_t* mask, uint8_t* mac, uint8_t* ipadr)
 112          {
 113   1        reg_wizchip_cs_cbfunc(my_cs_sel, my_cs_desel);
 114   1        reg_wizchip_spi_cbfunc(my_spi_rb, my_spi_wb);
 115   1        reg_wizchip_spiburst_cbfunc(read_buf, write_buf);
C51 COMPILER V9.60.7.0   MY_WIZNET                                                         05/29/2023 20:18:31 PAGE 3   

 116   1        reg_wizchip_cris_cbfunc(my_cris_en, my_cris_ex);
 117   1        wizchip_init(NULL, NULL);             
 118   1      
 119   1        return passADDR(gw, mask, mac, ipadr);
 120   1      }
 121          
 122          
 123          
 124          
 125          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    899    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----      45
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
